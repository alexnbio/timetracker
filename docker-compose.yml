version: '3.9'

# Services
services:

  # Nginx Service
  nginx:
    image: nginx:1.21.3
    ports:
      - 85:80
    volumes:
      - ./:${COMPOSE_WORKING_DIR}
      - ./.docker/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - php
  
  # PHP Service
  php:
    build:
      context: ./.docker
    working_dir: ${COMPOSE_WORKING_DIR}
    volumes:
      - ./:${COMPOSE_WORKING_DIR}
    depends_on:
      - mysql
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - XDEBUG_TRIGGER=${PHP_IDEKEY}

  # MySQL Service
  mysql:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ${COMPOSE_PROJECT_NAME}
    volumes:
      - ./.docker/mysql/my.conf:/etc/mysql/conf.d/my.conf
      - mysqldata:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      interval: 5s
      retries: 10

  # PhpMyAdmin Service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5
    ports:
      - 8080:80
    environment:
      PMA_HOST: mysql
    depends_on:
      - mysql

# Volumes

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###
volumes:

  mysqldata:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
